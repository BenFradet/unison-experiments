
use Optional None Some
use Sequence at snoc unfold
use Universal <

namespace Sequence where

  replicate : Nat -> a -> [a]
  replicate n e =
    f i = if i < n then Some(e, i + 1) else None
    unfold 0 f

  zipWith : (a -> b -> c) -> [a] -> [b] -> [c]
  zipWith f as bs =
    go acc i = case (at i as, at i bs) of
      (None, _) -> acc
      (_, None) -> acc
      (Some a, Some b) -> go (acc `snoc` (f a b)) (i + 1)
    go [] 0

namespace Math where

  zeros : Nat -> [Int]
  zeros n = replicate n +0

  sumsq : [Int] -> [Int] -> [Int]
  sumsq as bs = zipWith (Int.*) as bs

  minus : [Int] -> [Int] -> [Int]
  minus as bs = zipWith (Int.-) as bs

use Math zeros sumsq

x = [+1, +2, +3]

> zeros 8
> sumsq x x
> minus x x
