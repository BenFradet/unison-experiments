
use Matrix eq matrix zero
use Test.Result Ok Fail
use Universal ==

test> if (eq (Matrix 1 2 [1, 2]) (Matrix.Matrix 1 2 [1, 2]) == true) then Ok "Matrix.eq"
  else Fail "eq (Matrix 1 2 [1, 2]) (Matrix.Matrix 1 2 [1, 2]) is false"
test> if (eq (Matrix 1 1 [1, 2]) (Matrix.Matrix 1 2 [1, 2]) == false) then Ok "Matrix.eq"
  else Fail "eq (Matrix 1 1 [1, 2]) (Matrix.Matrix 1 2 [1, 2]) is true"
test> if (eq (Matrix 2 2 [1, 2]) (Matrix.Matrix 1 2 [1, 2]) == false) then Ok "Matrix.eq"
  else Fail "eq (Matrix 2 2 [1, 2]) (Matrix.Matrix 1 2 [1, 2]) is true"
test> if (eq (Matrix 1 2 [2, 2]) (Matrix.Matrix 1 2 [1, 2]) == false) then Ok "Matrix.eq"
  else Fail "eq (Matrix 1 2 [2, 2]) (Matrix.Matrix 1 2 [1, 2]) is true"

test> if (zero 1 2 == (Matrix.Matrix 1 2 [ +0, +0 ])) then Ok "Matrix.zero"
  else Fail "zero 1 2 != (Matrix.Matrix 1 2 [ +0, +0 ])"
test> if (zero 2 2 == (Matrix.Matrix 2 2 [ +0, +0, +0, +0 ])) then Ok "Matrix.zero"
  else Fail "zero 2 2 != (Matrix.Matrix 2 2 [ +0, +0, +0, +0 ])"

addGen : (Nat, Nat) -> Nat
addGen p = case p of (i, j) -> i + j

test> if (matrix 2 2 addGen == Matrix.Matrix 2 2 [2, 3, 3, 4]) then Ok "Matrix.matrix"
  else Fail "matrix 2 2 addGen != Matrix.Matrix 2 2 [2, 3, 3, 4]"
test> if (matrix 2 3 addGen == Matrix.Matrix 2 3 [2, 3, 4, 3, 4, 5]) then Ok "Matrix.matrix"
  else Fail "matrix 2 3 addGen != Matrix.Matrix 2 3 [2, 3, 4, 3, 4, 5]"
test> if (matrix 3 2 addGen == Matrix.Matrix 3 2 [2, 3, 3, 4, 4, 5]) then Ok "Matrix.matrix"
  else Fail "matrix 3 2 addGen != Matrix.Matrix 3 2 [2, 3, 3, 4, 4, 5]"
test> if (matrix 3 3 addGen == Matrix.Matrix 3 3 [2, 3, 4, 3, 4, 5, 4, 5, 6]) then Ok "Matrix.matrix"
  else Fail "matrix 3 3 addGen != Matrix.Matrix 3 3 [2, 3, 4, 3, 4, 5, 4, 5, 6]"
